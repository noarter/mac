一、命名规范
                      1.  【强制】名称禁止使用汉语拼音，尽量不用英文缩写，不要嫌名字长，力求语义表达清楚。

                      2.  【强制】类的名称使用驼峰格式，遵从UpperCamelCase的格式。如：BeanFactory。

                      3.  【强制】变量名，方法名统一遵从lowerCamelCase的格式。如：userId, getUser()。

                      4.  【强制】常量名统一使用全部大写，单词间用下划线分隔。

                      5.  【强制】数组变量中，中括号要加在类型后面，不要加在变量名后面。如：String[] name。

                      6.  【强制】boolean类型的变量不要以is开头，防止在序列化时会引起异常。

                      7.  【强制】包名统一使用小写，层级之间用点号分隔，包名统一使用单数形式，如util，类名可以使用复数形式，如StringUtils。

                      8.  【强制】枚举类型以Enum结尾。其中变量的命名规范参考4

                      9.  【强制】在进行对Long类型的变量进行直接赋值时，数字后面使用L，不要使用l（小写），防止混淆。

                      10.【建议】接口名不要使用I开头。抽象类用Abstract开头。实现类使用Impl结尾。异常类使用Exception结尾。测试类用被测试的类名开头，以Test结尾。

                      11.【建议】方法名中，获取单个对象的方法以get开头，获取多个对象的方法用list开头，插入数据的方法用save或insert开头，删除数据的方法用delete或remove方法开头，更新数据的方法用update开头。

                      12.【建议】interface中的变量与方法都不要加public，保持代码的整洁。

                      13.【建议】不同范围内使用的常量要放在不同的地方，类中使用的常量就放在类中，包中使用常量就放在包中。

二、格式规范
                      1.  【强制】大括号的左括号不要另换行，而是放在类与方法定义的结尾。如果使用if else时，右括号与else之间也不换行。

                      2.  【强制】使用小括号时，左括号与后面的字符中间不要有空格，右括号与前面的字符中间不要有空格。

                      3.  【强制】if/while/for/do/switch关键字与后面的括号中间要有空格。

                      4.  【强制】运算符左右两边必须要有空格。

                      5.  【强制】tab统一使用4个空格，使用idea时，要将tab设置为4个空格，还不是tab字符。

                      6.  【强制】单行字符数不超过120个。次行换行时，右缩进4个空格，第三行之后与第二行对齐。多个方法时，要将点与方法一起换行，多个参数换行时，要在逗号之后换行。

                      7.  【强制】方法参数中，多个参数逗号后面必须要有空格。

                      8.  【强制】file encoding统一使用UTF-8，换行符统一使用UNIX格式。

                      9.  【建议】同一个方法中，不同的逻辑之间可以插入一行空行。

 

三、OOP规范
                      1.  【强制】子类中覆盖的方法必须加@Override，可以使用idea自动生成。

                      2.  【强制】不要通过对象名来引用静态方法或者变量。

                      3.  【强制】每个实体类重写toString()方法，同时覆盖equals()方法与hashCode()方法。

                      4.  【强制】对外暴露的方法不允许修改方法签名，可以加上@Deprecated注解，并说明新的方法是什么。

                      5.  【强制】不要使用过时@Deprecated的方法。

                      6.  【强制】使用equals方法时，要将常量放在equals方法前面，变量放在括号里面，避免出现空指针异常，推荐使用Objects.equals()方法。

                      7.  【强制】基本变量的包装类型的数据进行比较时，统一使用equals方法判断是否相等，不要使用==。                                    

                      8.  【强制】Arrays.asList()方法生成的List不能使用add/remove/clear来改变其长度，否则会报UnsupportedOperationException异常。

                      9.  【强制】不要使用循环方式对list进行多个元素的删除，而应该使用Iterator来进行。防止出现并发的操作异常。

                      10.【强制】自定义异常要继承RuntimeException，而不要继承Exception。

                      11.【强制】项目中统一使用logback来配置日志格式，使用slf4j的接口方法来输出日志。例：private static final Logger logger = LoggerFactory.getLogger(AAA.class);

                      12.【强制】日志输出的级别要注意区分，调试用debug方法，正常输出用info方法，错误用error方法。生产环境禁止输出debug日志。

                      13.【建议】对于RuntimeException，特别是NullPointerException，能去做判断的尽量做判断，而不要去做try-catch，防止性能的损耗，提高代码的健壮性。

                      14.【建议】类的方法中，将重载方法放在一起，便于阅读。

                      15.【建议】类的方法中，将public，default放在最上面，private方法放在中间，getter和setter放在最下面。

                      16.【建议】慎用Object的clone方法，该方法是浅复制，如果要进行深复制，需要重写clone方法。

                      17.【建议】static成员如果只在本类使用，必须是private。如果成员方法或成员变量只在本类中调用，必须是private。如果成员方法或成员变量考虑在子类中调用，必须是protected。访问修饰符尽可能使用最小范围的。

                      18.【建议】使用集合时，要指定集合的初始大小。

                      19.【建议】在没有重复元素时，并且不要求顺序的前提下，建议使用Set而不是List。

 

四、并发编程规范
                      1.  【强制】线程资源必须通过线程池提供，不允许通过自行创建线程的方式提供 。

                      2.  【强制】使用ThreadPoolExecutor的方式创建线程池，不要使用Executors工具类创建线程池。

                      3.  【建议】不要用SimpleDateFormat作为static变量，因为它不是线程安全的。JDK8可以使Instant代替Date，LocalDateTime代替Calendar，DateTimeFormatter代替SimpleDateFormat。

                      4.  【建议】对多个资源加锁时，要注意锁的顺序，避免死锁。

                      5.  【建议】volatile关键字不能解决线程安全问题，所以只适用于一写多读的场景。

                      6.  【建议】HashMap使用时在高并发场景下会出现死循环，导致CPU飙升，开发中要注意此问题。

 

五、注释规范
                      1.  【强制】 所有的类必须要有相关信息的说明，至少包括功能，创建者，创建时间。

                      2.  【强制】所有的类，类变量，类方法，成员变量，成员方法都要使用javadoc的注释。

                      3.  【建议】尽量使用中文注释。

                      4.  【建议】方法中需要对不同的逻辑模块做注释说明，需要对关键点和复杂点进行注释。

                      5.  【建议】对于待做的事情，要用TODO。对于要修复的地方，要用FIXME
